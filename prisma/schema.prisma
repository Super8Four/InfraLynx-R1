
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Region {
  id          String   @id
  name        String
  description String?
  tags        String[]
  parentId    String?
  parent      Region?  @relation("RegionToRegion", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Region[] @relation("RegionToRegion")
  sites       Site[]
  assignments ContactAssignment[]
}

model SiteGroup {
  id          String  @id
  name        String
  description String?
  sites       Site[]
}

model Site {
  id              String      @id
  name            String
  status          String
  description     String?
  facility        String?
  asns            String?
  timeZone        String?
  physicalAddress String?
  shippingAddress String?
  latitude        Float?
  longitude       Float?
  comments        String?
  imageUrl        String?
  tags            String[]
  regionId        String?
  region          Region?     @relation(fields: [regionId], references: [id])
  groupId         String?
  group           SiteGroup?  @relation(fields: [groupId], references: [id])
  tenantGroupId   String?
  tenantGroup     TenantGroup? @relation(fields: [tenantGroupId], references: [id])
  tenantId        String?
  tenant          Tenant?     @relation(fields: [tenantId], references: [id])
  locations       Location[]
  racks           Rack[]
  powerPanels     PowerPanel[]
  assignments     ContactAssignment[]
  devices         Device[]
  termA_circuits  Circuit[]   @relation("CircuitTermA")
  termZ_circuits  Circuit[]   @relation("CircuitTermZ")
  clusters        Cluster[]
  accessPoints    AccessPoint[]
}

model Location {
  id          String     @id
  name        String
  description String?
  siteId      String
  site        Site       @relation(fields: [siteId], references: [id])
  racks       Rack[]
  powerPanels PowerPanel[]
  assignments ContactAssignment[]
}

model TenantGroup {
  id          String   @id
  name        String
  description String?
  tenants     Tenant[]
  sites       Site[]
  racks       Rack[]
  devices     Device[]
}

model Tenant {
  id          String    @id
  name        String
  description String?
  groupId     String?
  group       TenantGroup? @relation(fields: [groupId], references: [id])
  sites       Site[]
  racks       Rack[]
  devices     Device[]
  reservations RackReservation[]
}

model ContactGroup {
  id          String    @id
  name        String
  description String?
  contacts    Contact[]
}

model Contact {
  id          String        @id
  name        String
  title       String?
  phone       String?
  email       String?
  groupId     String?
  group       ContactGroup? @relation(fields: [groupId], references: [id])
  assignments ContactAssignment[]
}

model ContactRole {
  id          String        @id
  name        String
  description String?
  assignments ContactAssignment[]
}

model ContactAssignment {
  id         String @id
  objectType String
  objectId   String
  contactId  String
  contact    Contact @relation(fields: [contactId], references: [id])
  roleId     String
  role       ContactRole @relation(fields: [roleId], references: [id])
}

model Tag {
  id          String  @id
  name        String  @unique
  description String?
}

model DeviceRole {
  id          String   @id
  name        String   @unique
  description String?
  color       String?
  devices     Device[]
}

model Platform {
  id           String   @id
  name         String   @unique
  manufacturer String?
  description  String?
  devices      Device[]
}

model DeviceType {
  id           String   @id
  manufacturer String
  model        String
  u_height     Int
  devices      Device[]

  @@unique([manufacturer, model])
}

model VirtualChassis {
  id       String   @id
  name     String   @unique
  domain   String?
  masterId String
  members  Device[]
}

model Device {
  id             String    @id
  name           String
  status         String
  ip             String?
  tags           String[]
  vcPosition     Int?
  vcPriority     Int?
  position       Int?
  rackFace       String?
  assetTag       String?
  serial         String?
  configBackup   String?

  deviceTypeId   String
  deviceType     DeviceType @relation(fields: [deviceTypeId], references: [id])

  deviceRoleId   String
  deviceRole     DeviceRole @relation(fields: [deviceRoleId], references: [id])

  platformId     String?
  platform       Platform?  @relation(fields: [platformId], references: [id])

  siteId         String
  site           Site       @relation(fields: [siteId], references: [id])

  rackId         String?
  rack           Rack?      @relation(fields: [rackId], references: [id])

  virtualChassisId String?
  virtualChassis   VirtualChassis? @relation(fields: [virtualChassisId], references: [id])
  
  clusterId      String?
  cluster        Cluster?   @relation(fields: [clusterId], references: [id])
  
  tenantId       String?
  tenant         Tenant?    @relation(fields: [tenantId], references: [id])

  tenantGroupId  String?
  tenantGroup    TenantGroup? @relation(fields: [tenantGroupId], references: [id])
  
  ipAddresses    IPAddress[]
}

model RackRole {
  id          String  @id
  name        String  @unique
  description String?
  color       String?
  racks       Rack[]
}

model RackType {
  id           String @id
  manufacturer String
  model        String
  u_height     Int
  width        String
  racks        Rack[]

  @@unique([manufacturer, model])
}

model Rack {
  id              String      @id
  name            String
  status          String
  u_height        Int
  width           String
  tags            String[]
  facilityId      String?
  comments        String?
  startingUnit    Int?        @default(1)
  serial          String?
  assetTag        String?
  
  siteId          String
  site            Site        @relation(fields: [siteId], references: [id])
  
  locationId      String?
  location        Location?   @relation(fields: [locationId], references: [id])
  
  roleId          String?
  role            RackRole?   @relation(fields: [roleId], references: [id])
  
  typeId          String?
  type            RackType?   @relation(fields: [typeId], references: [id])

  tenantId        String?
  tenant          Tenant?     @relation(fields: [tenantId], references: [id])
  
  tenantGroupId   String?
  tenantGroup     TenantGroup? @relation(fields: [tenantGroupId], references: [id])

  devices         Device[]
  reservations    RackReservation[]
  powerFeeds      PowerFeed[]
}

model RackReservation {
  id          String  @id
  units       Int[]
  description String
  rackId      String
  rack        Rack    @relation(fields: [rackId], references: [id])
  tenantId    String
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
}

model Prefix {
  id          String      @id
  prefix      String      @unique
  status      String
  site        String?
  description String?
  tags        String[]
  ips         IPAddress[]
}

model IPAddress {
  id                 String  @id
  address            String  @unique
  status             String
  dnsName            String?
  description        String?
  
  assignedObjectType String?
  assignedObjectId   String?
  
  prefixId           String?
  prefix             Prefix? @relation(fields: [prefixId], references: [id])
  
  @@map("iPAddress")
}

model Provider {
  id       String    @id
  name     String    @unique
  asn      Int?
  account  String?
  circuits Circuit[]
}

model CircuitType {
  id          String    @id
  name        String    @unique
  description String?
  circuits    Circuit[]
}

model Circuit {
  id          String   @id
  cid         String   @unique
  status      String
  installDate DateTime?
  commitRate  Int?
  description String?

  providerId  String
  provider    Provider @relation(fields: [providerId], references: [id])

  typeId      String
  type        CircuitType @relation(fields: [typeId], references: [id])

  termA_siteId String
  termA_site   Site   @relation("CircuitTermA", fields: [termA_siteId], references: [id])

  termZ_siteId String
  termZ_site   Site   @relation("CircuitTermZ", fields: [termZ_siteId], references: [id])
}

model WirelessLan {
  id          String  @id
  ssid        String  @unique
  vlan        String?
  description String?
  authType    String?
}

model AccessPoint {
  id        String @id
  name      String @unique
  status    String
  model     String?
  ipAddress String?
  siteId    String
  site      Site   @relation(fields: [siteId], references: [id])
}

model VpnTunnel {
  id          String  @id
  name        String  @unique
  status      String
  type        String
  localPeer   String?
  remotePeer  String?
  description String?
}

model PowerPanel {
  id           String      @id
  name         String
  voltage      Int
  phase        String
  capacityAmps Int
  
  siteId       String
  site         Site        @relation(fields: [siteId], references: [id])

  locationId   String?
  location     Location?   @relation(fields: [locationId], references: [id])

  feeds        PowerFeed[]
}

model PowerFeed {
  id       String  @id
  name     String
  status   String
  type     String
  amperage Int
  voltage  Int

  panelId  String
  panel    PowerPanel @relation(fields: [panelId], references: [id])

  rackId   String?
  rack     Rack?      @relation(fields: [rackId], references: [id])
}

model ClusterType {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model ClusterGroup {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model Cluster {
  id       String  @id
  name     String  @unique
  comments String?

  typeId   String
  type     ClusterType @relation(fields: [typeId], references: [id])
  
  groupId  String
  group    ClusterGroup @relation(fields: [groupId], references: [id])

  siteId   String?
  site     Site?       @relation(fields: [siteId], references: [id])
  
  vms      VirtualMachine[]
  devices  Device[]
}

model VirtualMachine {
  id        String  @id
  name      String  @unique
  status    String
  role      String?
  vcpus     Int?
  memory    Int?
  disk      Int?
  primaryIp String?

  clusterId String
  cluster   Cluster @relation(fields: [clusterId], references: [id])
}
