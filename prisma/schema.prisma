// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model Region {
  id                 String              @id
  name               String              @unique
  description        String?
  tags               String[]
  parentId           String?
  parent             Region?             @relation("RegionToRegion", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Region[]            @relation("RegionToRegion")
  sites              Site[]
  contactAssignments ContactAssignment[]
}

model SiteGroup {
  id          String   @id
  name        String   @unique
  description String?
  sites       Site[]
}

model Site {
  id                 String              @id
  name               String              @unique
  status             String
  regionId           String?
  region             Region?             @relation(fields: [regionId], references: [id])
  groupId            String?
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  tenantId           String?
  tenant             Tenant?             @relation(fields: [tenantId], references: [id])
  tenantGroupId      String?
  physicalAddress    String?
  shippingAddress    String?
  latitude           Float?
  longitude          Float?
  facility           String?
  asns               String?
  timeZone           String?
  description        String?
  comments           String?
  imageUrl           String?
  tags               String[]
  locations          Location[]
  racks              Rack[]
  devices            Device[]
  circuitsA          Circuit[]           @relation("CircuitTermA")
  circuitsZ          Circuit[]           @relation("CircuitTermZ")
  accessPoints       AccessPoint[]
  powerPanels        PowerPanel[]
  clusters           Cluster[]
  contactAssignments ContactAssignment[]
}

model Location {
  id                 String              @id
  name               String
  description        String?
  siteId             String
  site               Site                @relation(fields: [siteId], references: [id])
  racks              Rack[]
  powerPanels        PowerPanel[]
  contactAssignments ContactAssignment[]

  @@unique([siteId, name])
}

model TenantGroup {
  id          String   @id
  name        String   @unique
  description String?
  tenants     Tenant[]
}

model Tenant {
  id               String            @id
  name             String            @unique
  description      String?
  groupId          String?
  group            TenantGroup?      @relation(fields: [groupId], references: [id])
  sites            Site[]
  racks            Rack[]
  devices          Device[]
  rackReservations RackReservation[]
}

model ContactGroup {
  id          String    @id
  name        String    @unique
  description String?
  contacts    Contact[]
}

model Contact {
  id          String              @id
  name        String
  title       String?
  phone       String?
  email       String?             @unique
  groupId     String?
  group       ContactGroup?       @relation(fields: [groupId], references: [id])
  assignments ContactAssignment[]
}

model ContactRole {
  id          String              @id
  name        String              @unique
  description String?
  assignments ContactAssignment[]
}

model ContactAssignment {
  id         String      @id
  objectType String
  objectId   String
  contactId  String
  roleId     String
  contact    Contact     @relation(fields: [contactId], references: [id])
  role       ContactRole @relation(fields: [roleId], references: [id])
  region     Region?     @relation(fields: [objectId], references: [id])
  site       Site?       @relation(fields: [objectId], references: [id])
  location   Location?   @relation(fields: [objectId], references: [id])
}

model Tag {
  id          String  @id
  name        String  @unique
  description String?
}

model DeviceRole {
  id          String   @id
  name        String   @unique
  description String?
  color       String
  devices     Device[]
}

model Platform {
  id           String   @id
  name         String   @unique
  manufacturer String
  description  String?
  devices      Device[]
}

model DeviceType {
  id           String   @id
  manufacturer String
  model        String
  u_height     Int
  devices      Device[]

  @@unique([manufacturer, model])
}

model VirtualChassis {
  id      String   @id
  name    String   @unique
  domain  String?
  masterId String?  @unique
  master  Device?  @relation("VirtualChassisMaster", fields: [masterId], references: [id])
  members Device[] @relation("VirtualChassisMember")
}

model Device {
  id               String          @id
  name             String?         @unique
  deviceTypeId     String
  status           String
  deviceRoleId     String
  platformId       String?
  siteId           String
  rackId           String?
  clusterId        String?
  virtualChassisId String?
  ip               String?
  tags             String[]
  vcPosition       Int?
  vcPriority       Int?
  position         Int?
  rackFace         String?
  assetTag         String?         @unique
  serial           String?         @unique
  configBackup     String?
  tenantId         String?
  tenantGroupId    String?
  deviceType       DeviceType      @relation(fields: [deviceTypeId], references: [id])
  deviceRole       DeviceRole      @relation(fields: [deviceRoleId], references: [id])
  platform         Platform?       @relation(fields: [platformId], references: [id])
  site             Site            @relation(fields: [siteId], references: [id])
  rack             Rack?           @relation(fields: [rackId], references: [id])
  cluster          Cluster?        @relation(fields: [clusterId], references: [id])
  tenant           Tenant?         @relation(fields: [tenantId], references: [id])
  virtualChassis   VirtualChassis? @relation("VirtualChassisMember", fields: [virtualChassisId], references: [id])
  masterForVc      VirtualChassis? @relation("VirtualChassisMaster")
  ipAddresses      IPAddress[]
}

model RackRole {
  id          String   @id
  name        String   @unique
  description String?
  color       String
  racks       Rack[]
}

enum RackWidth {
  nineteen_in
  twentythree_in
}

model RackType {
  id           String    @id
  manufacturer String
  model        String
  u_height     Int
  width        RackWidth
  racks        Rack[]

  @@unique([manufacturer, model])
}

model Rack {
  id               String            @id
  name             String
  siteId           String
  locationId       String?
  roleId           String?
  typeId           String?
  status           String
  u_height         Int
  width            RackWidth
  tags             String[]
  facilityId       String?
  tenantId         String?
  tenantGroupId    String?
  comments         String?
  startingUnit     Int?              @default(1)
  serial           String?           @unique
  assetTag         String?           @unique
  site             Site              @relation(fields: [siteId], references: [id])
  location         Location?         @relation(fields: [locationId], references: [id])
  role             RackRole?         @relation(fields: [roleId], references: [id])
  type             RackType?         @relation(fields: [typeId], references: [id])
  tenant           Tenant?           @relation(fields: [tenantId], references: [id])
  devices          Device[]
  reservations     RackReservation[]
  powerFeeds       PowerFeed[]

  @@unique([siteId, name])
}

model RackReservation {
  id          String  @id
  rackId      String
  units       Int[]
  tenantId    String
  description String
  rack        Rack    @relation(fields: [rackId], references: [id])
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
}

model Prefix {
  id          String      @id
  prefix      String      @unique
  status      String
  site        String?
  description String?
  tags        String[]
  ips         IPAddress[]
}

model IPAddress {
  id                 String  @id
  address            String  @unique
  status             String
  assignedObjectType String?
  assignedObjectId   String?
  dnsName            String?
  description        String?
  prefixId           String
  prefix             Prefix  @relation(fields: [prefixId], references: [id])
  device             Device? @relation(fields: [assignedObjectId], references: [id])
}

model Provider {
  id       String    @id
  name     String    @unique
  asn      Int?
  account  String?
  circuits Circuit[]
}

model CircuitType {
  id          String    @id
  name        String    @unique
  description String?
  circuits    Circuit[]
}

model Circuit {
  id           String      @id
  cid          String      @unique
  providerId   String
  typeId       String
  status       String
  installDate  DateTime
  commitRate   Int?
  description  String?
  termA_siteId String
  termZ_siteId String
  provider     Provider    @relation(fields: [providerId], references: [id])
  type         CircuitType @relation(fields: [typeId], references: [id])
  termA_site   Site        @relation("CircuitTermA", fields: [termA_siteId], references: [id])
  termZ_site   Site        @relation("CircuitTermZ", fields: [termZ_siteId], references: [id])
}

model WirelessLan {
  id          String  @id
  ssid        String  @unique
  vlan        String?
  description String?
  authType    String
}

model AccessPoint {
  id        String  @id
  name      String  @unique
  siteId    String
  status    String
  model     String
  ipAddress String?
  site      Site    @relation(fields: [siteId], references: [id])
}

model VpnTunnel {
  id          String  @id
  name        String  @unique
  status      String
  type        String
  localPeer   String
  remotePeer  String
  description String?
}

enum PowerPanelPhase {
  single_phase
  three_phase
}

model PowerPanel {
  id           String          @id
  name         String
  siteId       String
  locationId   String?
  voltage      Int
  phase        PowerPanelPhase
  capacityAmps Int
  site         Site            @relation(fields: [siteId], references: [id])
  location     Location?       @relation(fields: [locationId], references: [id])
  powerFeeds   PowerFeed[]

  @@unique([siteId, name])
}

enum PowerFeedType {
  primary
  redundant
}

model PowerFeed {
  id       String        @id
  name     String        @unique
  panelId  String
  rackId   String?
  status   String
  type     PowerFeedType
  amperage Int
  voltage  Int
  panel    PowerPanel    @relation(fields: [panelId], references: [id])
  rack     Rack?         @relation(fields: [rackId], references: [id])
}

model ClusterType {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model ClusterGroup {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model Cluster {
  id              String           @id
  name            String           @unique
  typeId          String
  groupId         String
  siteId          String?
  comments        String?
  type            ClusterType      @relation(fields: [typeId], references: [id])
  group           ClusterGroup     @relation(fields: [groupId], references: [id])
  site            Site?            @relation(fields: [siteId], references: [id])
  devices         Device[]
  virtualMachines VirtualMachine[]
}

enum VirtualMachineStatus {
  active
  offline
  building
}

model VirtualMachine {
  id        String               @id
  name      String               @unique
  status    VirtualMachineStatus
  clusterId String
  role      String?
  vcpus     Int?
  memory    Int?
  disk      Int?
  primaryIp String?
  cluster   Cluster              @relation(fields: [clusterId], references: [id])
}
