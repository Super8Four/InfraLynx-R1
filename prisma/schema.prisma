// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  tags               String[]
  parentId           String?
  parent             Region?             @relation("RegionHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Region[]            @relation("RegionHierarchy")
  sites              Site[]
  contactAssignments ContactAssignment[]
}

model SiteGroup {
  id          String @id @default(cuid())
  name        String
  description String?
  sites       Site[]
}

model Site {
  id                 String              @id @default(cuid())
  name               String
  status             String
  regionId           String?
  region             Region?             @relation(fields: [regionId], references: [id])
  groupId            String?
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  latitude           Float?
  longitude          Float?
  physicalAddress    String?
  shippingAddress    String?
  imageUrl           String?
  facility           String?
  asns               String?
  timeZone           String?
  description        String?
  comments           String?
  tags               String[]
  tenantId           String?
  tenant             Tenant?             @relation(fields: [tenantId], references: [id])
  tenantGroupId      String?
  tenantGroup        TenantGroup?        @relation(fields: [tenantGroupId], references: [id])
  locations          Location[]
  devices            Device[]
  racks              Rack[]
  contactAssignments ContactAssignment[]
  circuitsA          Circuit[]           @relation("CircuitTermA")
  circuitsZ          Circuit[]           @relation("CircuitTermZ")
  powerPanels        PowerPanel[]
  accessPoints       AccessPoint[]
  clusters           Cluster[]
}

model Location {
  id                 String              @id @default(cuid())
  name               String
  siteId             String
  site               Site                @relation(fields: [siteId], references: [id])
  description        String?
  racks              Rack[]
  powerPanels        PowerPanel[]
  contactAssignments ContactAssignment[]
}

model TenantGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  tenants     Tenant[]
  sites       Site[]
  racks       Rack[]
  devices     Device[]
}

model Tenant {
  id              String            @id @default(cuid())
  name            String
  groupId         String?
  group           TenantGroup?      @relation(fields: [groupId], references: [id])
  description     String?
  sites           Site[]
  racks           Rack[]
  devices         Device[]
  reservations    RackReservation[]
}

model ContactGroup {
  id          String    @id @default(cuid())
  name        String
  description String?
  contacts    Contact[]
}

model Contact {
  id          String              @id @default(cuid())
  name        String
  email       String
  phone       String
  title       String
  groupId     String?
  group       ContactGroup?       @relation(fields: [groupId], references: [id])
  assignments ContactAssignment[]
}

model ContactRole {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  contactAssignments ContactAssignment[]
}

model ContactAssignment {
  id          String      @id @default(cuid())
  objectType  String // e.g., "Region", "Site"
  objectId    String
  contactId   String
  contact     Contact     @relation(fields: [contactId], references: [id])
  roleId      String
  role        ContactRole @relation(fields: [roleId], references: [id])
  region      Region?     @relation(fields: [objectId], references: [id])
  site        Site?       @relation(fields: [objectId], references: [id])
  location    Location?   @relation(fields: [objectId], references: [id])
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
}

model DeviceRole {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  devices     Device[]
}

model Platform {
  id           String   @id @default(cuid())
  name         String
  manufacturer String?
  description  String?
  devices      Device[]
}

model DeviceType {
  id           String   @id @default(cuid())
  manufacturer String
  model        String
  u_height     Int
  devices      Device[]
}

model VirtualChassis {
  id      String   @id @default(cuid())
  name    String
  domain  String?
  master  Device?  @relation("VCMaster", fields: [masterId], references: [id])
  masterId String?  @unique
  members Device[] @relation("VCMembers")
}

model Device {
  id               String          @id @default(cuid())
  name             String
  deviceTypeId     String
  deviceType       DeviceType      @relation(fields: [deviceTypeId], references: [id])
  deviceRoleId     String
  deviceRole       DeviceRole      @relation(fields: [deviceRoleId], references: [id])
  platformId       String?
  platform         Platform?       @relation(fields: [platformId], references: [id])
  siteId           String
  site             Site            @relation(fields: [siteId], references: [id])
  rackId           String?
  rack             Rack?           @relation(fields: [rackId], references: [id])
  ip               String?
  status           String
  tags             String[]
  assetTag         String?
  serial           String?
  configBackup     String?
  position         Int?
  rackFace         String?
  clusterId        String?
  cluster          Cluster?        @relation(fields: [clusterId], references: [id])
  virtualChassisId String?
  virtualChassis   VirtualChassis? @relation("VCMembers", fields: [virtualChassisId], references: [id])
  vcPosition       Int?
  vcPriority       Int?
  tenantId         String?
  tenant           Tenant?         @relation(fields: [tenantId], references: [id])
  tenantGroupId    String?
  tenantGroup      TenantGroup?    @relation(fields: [tenantGroupId], references: [id])
  vcMasterFor      VirtualChassis? @relation("VCMaster")
  airflow          String?
  configTemplate   String?
  latitude         Float?
  longitude        Float?
  locationId       String?
}

model RackRole {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String?
  racks       Rack[]
}

model RackType {
  id           String @id @default(cuid())
  manufacturer String
  model        String
  u_height     Int
  width        String
  racks        Rack[]
}

model Rack {
  id            String            @id @default(cuid())
  name          String
  siteId        String
  site          Site              @relation(fields: [siteId], references: [id])
  locationId    String?
  location      Location?         @relation(fields: [locationId], references: [id])
  roleId        String?
  role          RackRole?         @relation(fields: [roleId], references: [id])
  typeId        String?
  type          RackType?         @relation(fields: [typeId], references: [id])
  status        String
  u_height      Int
  width         String
  startingUnit  Int?
  facilityId    String?
  serial        String?
  assetTag      String?
  tags          String[]
  comments      String?
  tenantId      String?
  tenant        Tenant?           @relation(fields: [tenantId], references: [id])
  tenantGroupId String?
  tenantGroup   TenantGroup?      @relation(fields: [tenantGroupId], references: [id])
  devices       Device[]
  reservations  RackReservation[]
  powerFeeds    PowerFeed[]
}

model RackReservation {
  id          String  @id @default(cuid())
  rackId      String
  rack        Rack    @relation(fields: [rackId], references: [id])
  units       Int[]
  tenantId    String
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
  description String
}

model Prefix {
  id          String      @id @default(cuid())
  prefix      String      @unique
  status      String
  site        String?
  description String?
  tags        String[]
  ips         IPAddress[]
}

model IPAddress {
  id                 String  @id @default(cuid())
  address            String  @unique
  status             String
  assignedObjectType String?
  assignedObjectId   String?
  dnsName            String?
  description        String?
  prefixId           String
  prefix             Prefix  @relation(fields: [prefixId], references: [id])
}

model Provider {
  id       String    @id @default(cuid())
  name     String
  asn      Int?
  account  String?
  circuits Circuit[]
}

model CircuitType {
  id          String    @id @default(cuid())
  name        String
  description String?
  circuits    Circuit[]
}

model Circuit {
  id           String      @id @default(cuid())
  cid          String
  providerId   String
  provider     Provider    @relation(fields: [providerId], references: [id])
  typeId       String
  type         CircuitType @relation(fields: [typeId], references: [id])
  status       String
  installDate  DateTime
  commitRate   Int?
  description  String?
  termA_siteId String
  termA_site   Site        @relation("CircuitTermA", fields: [termA_siteId], references: [id])
  termZ_siteId String
  termZ_site   Site        @relation("CircuitTermZ", fields: [termZ_siteId], references: [id])
}

model WirelessLan {
  id          String  @id @default(cuid())
  ssid        String  @unique
  vlan        String?
  description String?
  authType    String
}

model AccessPoint {
  id        String @id @default(cuid())
  name      String
  siteId    String
  site      Site   @relation(fields: [siteId], references: [id])
  status    String
  model     String
  ipAddress String
}

model VpnTunnel {
  id          String @id @default(cuid())
  name        String @unique
  status      String
  type        String
  localPeer   String
  remotePeer  String
  description String?
}

model PowerPanel {
  id           String      @id @default(cuid())
  name         String
  siteId       String
  site         Site        @relation(fields: [siteId], references: [id])
  locationId   String?
  location     Location?   @relation(fields: [locationId], references: [id])
  voltage      Int
  phase        String // 'single_phase' or 'three_phase'
  capacityAmps Int
  feeds        PowerFeed[]
}

model PowerFeed {
  id       String     @id @default(cuid())
  name     String
  panelId  String
  panel    PowerPanel @relation(fields: [panelId], references: [id])
  rackId   String?
  rack     Rack?      @relation(fields: [rackId], references: [id])
  status   String
  type     String // 'primary' or 'redundant'
  amperage Int
  voltage  Int
}

model ClusterType {
  id          String    @id @default(cuid())
  name        String
  description String?
  clusters    Cluster[]
}

model ClusterGroup {
  id          String    @id @default(cuid())
  name        String
  description String?
  clusters    Cluster[]
}

model Cluster {
  id              String           @id @default(cuid())
  name            String
  typeId          String
  type            ClusterType      @relation(fields: [typeId], references: [id])
  groupId         String
  group           ClusterGroup     @relation(fields: [groupId], references: [id])
  siteId          String?
  site            Site?            @relation(fields: [siteId], references: [id])
  comments        String?
  virtualMachines VirtualMachine[]
  devices         Device[]
}

model VirtualMachine {
  id        String   @id @default(cuid())
  name      String
  status    String
  clusterId String
  cluster   Cluster  @relation(fields: [clusterId], references: [id])
  role      String?
  vcpus     Int
  memory    Int
  disk      Int
  primaryIp String?
}
