// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// --- Enums ---

enum SiteStatus {
  active
  planned
  offline
  decommissioning
}

enum DeviceStatus {
  active
  offline
  staged
  planned
  decommissioning
  provisioning
}

enum RackStatus {
  active
  planned
  decommissioning
}

enum RackWidth {
  nineteen_in
  twentythree_in
}

enum Airflow {
  front_to_rear
  rear_to_front
  side_to_rear
  passive
}

enum RackFace {
  front
  rear
}

enum IPAddressStatus {
  active
  reserved
  deprecated
  dhcp
}

enum AssignedObjectType {
  Device
  VirtualMachine
  interface
}

enum CircuitStatus {
  active
  provisioning
  offline
  decommissioned
}

enum VpnTunnelType {
  IPsec
  OpenVPN
  WireGuard
}

enum VpnTunnelStatus {
  active
  disabled
  planned
}

enum PowerFeedType {
  primary
  redundant
}

enum PowerFeedStatus {
  active
  planned
  offline
}

enum Phase {
  single_phase
  three_phase
}

enum VmStatus {
  active
  offline
  building
}

// --- Organization ---

model Region {
  id                 String              @id
  name               String
  description        String?
  tags               String[]
  parentId           String?
  parent             Region?             @relation("RegionHierarchy", fields: [parentId], references: [id])
  children           Region[]            @relation("RegionHierarchy")
  sites              Site[]
  contactAssignments ContactAssignment[]
}

model SiteGroup {
  id          String @id
  name        String @unique
  description String?
  sites       Site[]
}

model Site {
  id                 String              @id
  name               String              @unique
  status             SiteStatus
  description        String?
  regionId           String?
  region             Region?             @relation(fields: [regionId], references: [id])
  groupId            String?
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  tags               String[]
  physicalAddress    String?
  shippingAddress    String?
  latitude           Float?
  longitude          Float?
  comments           String?
  facility           String?
  asns               String?
  timeZone           String?
  imageUrl           String?             @default("https://placehold.co/600x400.png")
  tenantId           String?
  tenant             Tenant?             @relation(fields: [tenantId], references: [id])
  tenantGroupId      String?
  locations          Location[]
  racks              Rack[]
  devices            Device[]
  powerPanels        PowerPanel[]
  circuitsA          Circuit[]           @relation("TermA")
  circuitsZ          Circuit[]           @relation("TermZ")
  accessPoints       AccessPoint[]
  clusters           Cluster[]
  contactAssignments ContactAssignment[]
}

model Location {
  id                 String              @id
  name               String
  description        String?
  siteId             String
  site               Site                @relation(fields: [siteId], references: [id])
  racks              Rack[]
  powerPanels        PowerPanel[]
  contactAssignments ContactAssignment[]
}

model TenantGroup {
  id          String   @id
  name        String   @unique
  description String?
  tenants     Tenant[]
}

model Tenant {
  id           String            @id
  name         String            @unique
  description  String?
  groupId      String?
  group        TenantGroup?      @relation(fields: [groupId], references: [id])
  sites        Site[]
  racks        Rack[]
  reservations RackReservation[]
}

model ContactGroup {
  id          String    @id
  name        String    @unique
  description String?
  contacts    Contact[]
}

model Contact {
  id          String              @id
  name        String
  email       String              @unique
  phone       String
  title       String
  groupId     String?
  group       ContactGroup?       @relation(fields: [groupId], references: [id])
  assignments ContactAssignment[]
}

model ContactRole {
  id          String              @id
  name        String              @unique
  description String?
  assignments ContactAssignment[]
}

model ContactAssignment {
  id         String @id
  objectType String
  objectId   String
  contactId  String
  contact    Contact @relation(fields: [contactId], references: [id])
  roleId     String
  role       ContactRole @relation(fields: [roleId], references: [id])

  region   Region?   @relation(fields: [objectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  site     Site?     @relation(fields: [objectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  location Location? @relation(fields: [objectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([objectType, objectId, contactId, roleId])
}

model Tag {
  id          String  @id
  name        String  @unique
  description String?
}

// --- Devices ---

model DeviceRole {
  id          String   @id
  name        String   @unique
  description String?
  color       String?
  devices     Device[]
}

model Platform {
  id           String   @id
  name         String   @unique
  manufacturer String
  description  String?
  devices      Device[]
}

model DeviceType {
  id           String   @id
  manufacturer String
  model        String
  u_height     Int
  devices      Device[]

  @@unique([manufacturer, model])
}

model VirtualChassis {
  id      String   @id
  name    String   @unique
  domain  String
  masterId String?  @unique
  master  Device?  @relation("VC_Master", fields: [masterId], references: [id])
  members Device[] @relation("VC_Member")
}

model Device {
  id               String          @id
  name             String?         @unique
  deviceTypeId     String
  deviceType       DeviceType      @relation(fields: [deviceTypeId], references: [id])
  status           DeviceStatus
  deviceRoleId     String
  deviceRole       DeviceRole      @relation(fields: [deviceRoleId], references: [id])
  platformId       String?
  platform         Platform?       @relation(fields: [platformId], references: [id])
  siteId           String
  site             Site            @relation(fields: [siteId], references: [id])
  ip               String?
  tags             String[]
  assetTag         String?
  serial           String?
  configBackup     String?
  clusterId        String?
  cluster          Cluster?        @relation(fields: [clusterId], references: [id])
  rackId           String?
  rack             Rack?           @relation(fields: [rackId], references: [id])
  position         Int?
  rackFace         RackFace?
  airflow          Airflow?
  tenantId         String?
  tenantGroupId    String?
  virtualChassisId String?
  virtualChassis   VirtualChassis? @relation("VC_Member", fields: [virtualChassisId], references: [id])
  vcPosition       Int?
  vcPriority       Int?
  masterOf         VirtualChassis? @relation("VC_Master")
  assignedIp       IPAddress[]
  configTemplate   String?
}

// --- Racks ---

model RackRole {
  id          String  @id
  name        String  @unique
  description String?
  color       String?
  racks       Rack[]
}

model RackType {
  id           String    @id
  manufacturer String
  model        String
  u_height     Int
  width        RackWidth
  racks        Rack[]

  @@unique([manufacturer, model])
}

model Rack {
  id            String            @id
  name          String
  siteId        String
  site          Site              @relation(fields: [siteId], references: [id])
  locationId    String?
  location      Location?         @relation(fields: [locationId], references: [id])
  roleId        String?
  role          RackRole?         @relation(fields: [roleId], references: [id])
  typeId        String?
  type          RackType?         @relation(fields: [typeId], references: [id])
  status        RackStatus
  u_height      Int
  width         RackWidth
  tags          String[]
  facilityId    String?
  serial        String?
  assetTag      String?
  tenantId      String?
  tenant        Tenant?           @relation(fields: [tenantId], references: [id])
  tenantGroupId String?
  comments      String?
  startingUnit  Int?              @default(1)
  airflow       Airflow?
  outerWidth    Int?
  outerHeight   Int?
  outerDepth    Int?
  outerUnit     String?
  weight        Float?
  maxWeight     Float?
  weightUnit    String?
  mountingDepth Int?
  devices       Device[]
  reservations  RackReservation[]
  powerFeeds    PowerFeed[]
}

model RackReservation {
  id          String @id
  rackId      String
  rack        Rack   @relation(fields: [rackId], references: [id])
  units       Int[]
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  description String
}

// --- IPAM ---

model Prefix {
  id          String      @id
  prefix      String      @unique
  status      String
  site        String?
  description String?
  tags        String[]
  ips         IPAddress[]
}

model IPAddress {
  id                 String            @id
  address            String            @unique
  status             IPAddressStatus
  assignedObjectType String?
  assignedObjectId   String?
  dnsName            String?
  description        String?
  prefixId           String
  prefix             Prefix            @relation(fields: [prefixId], references: [id])

  assignedDevice     Device?           @relation(fields: [assignedObjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedVM         VirtualMachine?   @relation(fields: [assignedObjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// --- Circuits ---

model Provider {
  id       String    @id
  name     String    @unique
  asn      Int?
  account  String?
  circuits Circuit[]
}

model CircuitType {
  id          String    @id
  name        String    @unique
  description String?
  circuits    Circuit[]
}

model Circuit {
  id           String      @id
  cid          String      @unique
  providerId   String
  provider     Provider    @relation(fields: [providerId], references: [id])
  typeId       String
  type         CircuitType @relation(fields: [typeId], references: [id])
  status       CircuitStatus
  installDate  DateTime
  commitRate   Int?
  description  String?
  termA_siteId String
  termA_site   Site        @relation("TermA", fields: [termA_siteId], references: [id])
  termZ_siteId String
  termZ_site   Site        @relation("TermZ", fields: [termZ_siteId], references: [id])
}

// --- Wireless ---

model WirelessLan {
  id          String  @id
  ssid        String  @unique
  vlan        String?
  description String?
  authType    String
}

model AccessPoint {
  id        String @id
  name      String @unique
  siteId    String
  site      Site   @relation(fields: [siteId], references: [id])
  status    String
  model     String
  ipAddress String
}

// --- VPN ---

model VpnTunnel {
  id          String        @id
  name        String        @unique
  status      VpnTunnelStatus
  type        VpnTunnelType
  localPeer   String
  remotePeer  String
  description String?
}

// --- Power ---

model PowerPanel {
  id           String      @id
  name         String
  siteId       String
  site         Site        @relation(fields: [siteId], references: [id])
  locationId   String?
  location     Location?   @relation(fields: [locationId], references: [id])
  voltage      Int
  phase        Phase
  capacityAmps Int
  feeds        PowerFeed[]
}

model PowerFeed {
  id       String        @id
  name     String
  panelId  String
  panel    PowerPanel    @relation(fields: [panelId], references: [id])
  rackId   String?
  rack     Rack?         @relation(fields: [rackId], references: [id])
  status   PowerFeedStatus
  type     PowerFeedType
  amperage Int
  voltage  Int
}

// --- Virtualization ---

model ClusterType {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model ClusterGroup {
  id          String    @id
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model Cluster {
  id              String           @id
  name            String           @unique
  typeId          String
  type            ClusterType      @relation(fields: [typeId], references: [id])
  groupId         String
  group           ClusterGroup     @relation(fields: [groupId], references: [id])
  siteId          String?
  site            Site?            @relation(fields: [siteId], references: [id])
  comments        String?
  devices         Device[]
  virtualMachines VirtualMachine[]
}

model VirtualMachine {
  id            String      @id
  name          String      @unique
  status        VmStatus
  clusterId     String
  cluster       Cluster     @relation(fields: [clusterId], references: [id])
  role          String?
  vcpus         Int
  memory        Int
  disk          Int
  primaryIp     String?
  ipAssignments IPAddress[]
}
