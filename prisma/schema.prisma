// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // Add the debian-openssl-3.0.x binary target for compatibility with the deployment environment
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -- ORGANIZATION -----------------------------------------------------------
model Region {
  id                 String              @id @default("region_")
  name               String              @unique
  description        String?
  tags               String[]
  parentId           String?
  parent             Region?             @relation("RegionToRegion", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children           Region[]            @relation("RegionToRegion")
  sites              Site[]
  contactAssignments ContactAssignment[]
}

model SiteGroup {
  id          String   @id @default("sg_")
  name        String   @unique
  description String?
  sites       Site[]
}

model Site {
  id                 String              @id @default("site_")
  name               String              @unique
  status             String              @default("active")
  regionId           String?
  region             Region?             @relation(fields: [regionId], references: [id])
  groupId            String?
  group              SiteGroup?          @relation(fields: [groupId], references: [id])
  tenantId           String?
  tenant             Tenant?             @relation(fields: [tenantId], references: [id])
  tenantGroupId      String?
  facility           String?
  asns               String?
  timeZone           String?
  description        String?
  comments           String?
  tags               String[]            @default([])
  physicalAddress    String?
  shippingAddress    String?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  locations          Location[]
  devices            Device[]
  racks              Rack[]
  powerPanels        PowerPanel[]
  clusters           Cluster[]
  circuitsA          Circuit[]           @relation("CircuitTermA")
  circuitsZ          Circuit[]           @relation("CircuitTermZ")
  accessPoints       AccessPoint[]
  contactAssignments ContactAssignment[]
}

model Location {
  id                 String              @id @default("loc_")
  name               String
  siteId             String
  site               Site                @relation(fields: [siteId], references: [id])
  description        String?
  racks              Rack[]
  powerPanels        PowerPanel[]
  contactAssignments ContactAssignment[]

  @@unique([siteId, name])
}

model TenantGroup {
  id          String   @id @default("tg_")
  name        String   @unique
  description String?
  tenants     Tenant[]
}

model Tenant {
  id          String       @id @default("t_")
  name        String       @unique
  description String?
  groupId     String?
  group       TenantGroup? @relation(fields: [groupId], references: [id])
  sites       Site[]
  racks       Rack[]
  devices     Device[]
  reservations RackReservation[]
}

model ContactGroup {
  id          String    @id @default("cg_")
  name        String    @unique
  description String?
  contacts    Contact[]
}

model Contact {
  id          String              @id @default("contact_")
  name        String
  title       String?
  phone       String?
  email       String?
  address     String?
  groupId     String?
  group       ContactGroup?       @relation(fields: [groupId], references: [id])
  assignments ContactAssignment[]
}

model ContactRole {
  id                 String              @id @default("cr_")
  name               String              @unique
  description        String?
  contactAssignments ContactAssignment[]
}

model ContactAssignment {
  id         String      @id @default("ca_")
  objectType String
  objectId   String
  contactId  String
  contact    Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  roleId     String
  role       ContactRole @relation(fields: [roleId], references: [id], onDelete: Restrict)
  region     Region?     @relation(fields: [objectId], references: [id])
  site       Site?       @relation(fields: [objectId], references: [id])
  location   Location?   @relation(fields: [objectId], references: [id])

  @@unique([objectType, objectId, contactId, roleId])
}


model Tag {
  id          String   @id @default("tag_")
  name        String   @unique
  description String?
}


// -- DEVICES ----------------------------------------------------------------
model DeviceRole {
  id          String   @id @default("dr_")
  name        String   @unique
  description String?
  color       String   @default("#cccccc")
  devices     Device[]
}

model Platform {
  id           String   @id @default("p_")
  name         String   @unique
  manufacturer String?
  description  String?
  devices      Device[]
}

model DeviceType {
  id           String   @id @default("dt_")
  manufacturer String
  model        String
  u_height     Int      @default(1)
  devices      Device[]

  @@unique([manufacturer, model])
}

model Device {
  id               String          @id @default("dev_")
  name             String?         @unique
  deviceRoleId     String
  deviceRole       DeviceRole      @relation(fields: [deviceRoleId], references: [id])
  deviceTypeId     String
  deviceType       DeviceType      @relation(fields: [deviceTypeId], references: [id])
  serial           String?
  assetTag         String?         @unique
  siteId           String
  site             Site            @relation(fields: [siteId], references: [id])
  rackId           String?
  rack             Rack?           @relation(fields: [rackId], references: [id])
  position         Int? // U-position in the rack
  rackFace         String? // "front" or "rear"
  status           String          @default("active")
  airflow          String? // "front_to_rear", etc.
  platformId       String?
  platform         Platform?       @relation(fields: [platformId], references: [id])
  ip               String? // Primary IP
  tags             String[]        @default([])
  virtualChassisId String?
  virtualChassis   VirtualChassis? @relation(fields: [virtualChassisId], references: [id])
  vcPosition       Int?
  vcPriority       Int?
  clusterId        String?
  cluster          Cluster?        @relation(fields: [clusterId], references: [id])
  tenantGroupId    String?
  tenantId         String?
  tenant           Tenant?         @relation(fields: [tenantId], references: [id])
  configBackup     String?
  masterForVc      VirtualChassis? @relation("MasterDevice")
  ipAddresses      IPAddress[]
}

model VirtualChassis {
  id      String   @id @default("vc_")
  name    String   @unique
  domain  String
  members Device[]
  masterId String?  @unique
  master  Device?  @relation("MasterDevice", fields: [masterId], references: [id])
}

// -- RACKS ------------------------------------------------------------------
model RackRole {
  id          String @id @default("rr_")
  name        String @unique
  description String?
  color       String @default("#cccccc")
  racks       Rack[]
}

model RackType {
  id           String @id @default("rt_")
  manufacturer String
  model        String
  u_height     Int
  width        String // "nineteen_in" or "twentythree_in"
  racks        Rack[]

  @@unique([manufacturer, model])
}

model Rack {
  id              String            @id @default("rack_")
  name            String
  siteId          String
  site            Site              @relation(fields: [siteId], references: [id])
  locationId      String?
  location        Location?         @relation(fields: [locationId], references: [id])
  roleId          String?
  role            RackRole?         @relation(fields: [roleId], references: [id])
  typeId          String?
  type            RackType?         @relation(fields: [typeId], references: [id])
  status          String            @default("active")
  facilityId      String?
  tenantId        String?
  tenant          Tenant?           @relation(fields: [tenantId], references: [id])
  serial          String?
  assetTag        String?
  width           String            @default("nineteen_in")
  u_height        Int               @default(42)
  startingUnit    Int?              @default(1)
  comments        String?
  tags            String[]          @default([])
  devices         Device[]
  reservations    RackReservation[]
  powerFeeds      PowerFeed[]
  tenantGroupId   String?
}

model RackReservation {
  id          String @id @default("res_")
  rackId      String
  rack        Rack   @relation(fields: [rackId], references: [id])
  units       Int[]
  tenantId    String
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  description String
}

// -- IPAM & CIRCUITS ----------------------------------------------------------
model Prefix {
  id          String      @id @default("prefix_")
  prefix      String      @unique
  status      String      @default("active")
  site        String?
  description String?
  tags        String[]    @default([])
  ips         IPAddress[]
}

model IPAddress {
  id                 String  @id @default("ip_")
  address            String  @unique
  status             String  @default("active")
  assignedObjectType String?
  assignedObjectId   String?
  device             Device? @relation(fields: [assignedObjectId], references: [id])
  dnsName            String?
  description        String?
  prefixId           String
  prefix             Prefix  @relation(fields: [prefixId], references: [id])
}

model Provider {
  id       String    @id @default("prov_")
  name     String    @unique
  asn      Int?
  account  String?
  circuits Circuit[]
}

model CircuitType {
  id          String    @id @default("ctype_")
  name        String    @unique
  description String?
  circuits    Circuit[]
}

model Circuit {
  id           String      @id @default("circ_")
  cid          String      @unique
  providerId   String
  provider     Provider    @relation(fields: [providerId], references: [id])
  typeId       String
  type         CircuitType @relation(fields: [typeId], references: [id])
  status       String      @default("active")
  installDate  DateTime    @default(now())
  commitRate   Int?
  description  String?
  termA_siteId String?
  termA_site   Site?       @relation("CircuitTermA", fields: [termA_siteId], references: [id])
  termZ_siteId String?
  termZ_site   Site?       @relation("CircuitTermZ", fields: [termZ_siteId], references: [id])
}


// -- WIRELESS, VPN, POWER -------------------------------------------------
model WirelessLan {
  id          String  @id @default("wlan_")
  ssid        String  @unique
  vlan        String?
  description String?
  authType    String
}

model AccessPoint {
  id        String @id @default("ap_")
  name      String @unique
  siteId    String
  site      Site   @relation(fields: [siteId], references: [id])
  status    String @default("active")
  model     String
  ipAddress String
}

model VpnTunnel {
  id          String  @id @default("vpn_")
  name        String  @unique
  status      String  @default("active")
  type        String
  localPeer   String
  remotePeer  String
  description String?
}

model PowerPanel {
  id           String      @id @default("pp_")
  name         String
  siteId       String
  site         Site        @relation(fields: [siteId], references: [id])
  locationId   String?
  location     Location?   @relation(fields: [locationId], references: [id])
  voltage      Int
  phase        String // "single_phase" or "three_phase"
  capacityAmps Int
  powerFeeds   PowerFeed[]

  @@unique([siteId, name])
}

model PowerFeed {
  id       String     @id @default("pf_")
  name     String     @unique
  panelId  String
  panel    PowerPanel @relation(fields: [panelId], references: [id])
  rackId   String?
  rack     Rack?      @relation(fields: [rackId], references: [id])
  status   String     @default("active")
  type     String // "primary" or "redundant"
  amperage Int
  voltage  Int
}


// -- VIRTUALIZATION ---------------------------------------------------------
model ClusterType {
  id          String    @id @default("ct_")
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model ClusterGroup {
  id          String    @id @default("cg_")
  name        String    @unique
  description String?
  clusters    Cluster[]
}

model Cluster {
  id                String           @id @default("cluster_")
  name              String           @unique
  typeId            String
  type              ClusterType      @relation(fields: [typeId], references: [id])
  groupId           String
  group             ClusterGroup     @relation(fields: [groupId], references: [id])
  siteId            String?
  site              Site?            @relation(fields: [siteId], references: [id])
  comments          String?
  devices           Device[]
  virtualMachines   VirtualMachine[]
}

model VirtualMachine {
  id        String   @id @default("vm_")
  name      String   @unique
  status    String   @default("active")
  clusterId String
  cluster   Cluster  @relation(fields: [clusterId], references: [id])
  role      String?
  vcpus     Int
  memory    Int // in GB
  disk      Int // in GB
  primaryIp String?
}
